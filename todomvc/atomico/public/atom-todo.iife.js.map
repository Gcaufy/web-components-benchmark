{"version":3,"file":"atom-todo.iife.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js","../src/todo-item/index.js","../src/todo-input/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { h, Element } from \"atomico\";\nimport TagInput from \"./todo-input\";\nimport TagItem from \"./todo-item\";\n\nimport style from \"./style.css\";\n\nexport const TAG_TODO = \"atom-todo\";\nexport const TAG_ITEM = \"atom-todo-item\";\nexport const TAG_INPUT = \"atom-todo-input\";\n\nexport default class TagTodo extends Element {\n    constructor() {\n        super();\n        this.attachShadow({ mode: \"open\" });\n        this.state.list = [\n            { text: \"my initial todo\", checked: false },\n            { text: \"Learn about Web Components\", checked: true }\n        ];\n    }\n    render() {\n        let { list = [] } = this.state;\n        return (\n            <div>\n                <h1>Todos Atomico</h1>\n                <section>\n                    <style>{style}</style>\n                    <atom-todo-input\n                        placeholder=\"What needs to be done?\"\n                        create={({ detail }) => {\n                            this.setState({\n                                list: list.concat({\n                                    text: detail.text,\n                                    checked: false\n                                })\n                            });\n                        }}\n                    />\n                    <div id=\"list-container\">\n                        {list.map(({ text, checked }, localIndex) => (\n                            <atom-todo-item\n                                text={text}\n                                checked={checked}\n                                remove={() => {\n                                    this.setState({\n                                        list: list.filter(\n                                            (data, index) => index !== localIndex\n                                        )\n                                    });\n                                }}\n                                toggle={() => {\n                                    this.setState({\n                                        list: list.map(\n                                            (data, index) =>\n                                                index === localIndex\n                                                    ? {\n                                                        ...data,\n                                                        checked: !data.checked\n                                                    }\n                                                    : data\n                                        )\n                                    });\n                                }}\n                            />\n                        ))}\n                    </div>\n                </section>\n            </div>\n        );\n    }\n}\n\ncustomElements.define(TAG_ITEM, TagItem);\ncustomElements.define(TAG_INPUT, TagInput);\ncustomElements.define(TAG_TODO, TagTodo);\n","import { h, Element } from \"atomico\";\nimport style from \"./style.css\";\nexport default class extends Element {\n    constructor() {\n        super();\n        this.attachShadow({ mode: \"open\" });\n    }\n    static get props() {\n        return [\"text\", \"checked\"];\n    }\n    render() {\n        return (\n            <li class={this.props.checked ? 'completed' : ''}>\n                <style>{style}</style>\n                <input\n                    type=\"checkbox\"\n                    change={() => {\n                        this.dispatch(\"toggle\");\n                    }}\n                    checked={this.props.checked}\n                />\n                <label>{this.props.text}</label>\n                <button\n                    click={() => {\n                        this.dispatch(\"remove\");\n                    }}\n                >\n                    x\n                </button>\n            </li>\n        );\n    }\n}\n","import { h, Element } from \"atomico\";\nimport style from \"./style.css\";\n\nexport default class extends Element {\n    constructor() {\n        super();\n        this.attachShadow({ mode: \"open\" });\n    }\n    static get props() {\n        return [\"placeholder\"];\n    }\n    render() {\n        return (\n            <form\n                submit={event => {\n                    event.preventDefault();\n                    this.dispatch(\"create\", {\n                        text: event.target.task.value\n                    });\n                    event.target.reset();\n                }}\n            >\n                <style>{style}</style>\n                <input\n                    name=\"task\"\n                    type=\"text\"\n                    placeholder={this.props.placeholder}\n                />\n            </form>\n        );\n    }\n}\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","TagTodo","Element","[object Object]","super","this","attachShadow","mode","state","list","text","checked","h","placeholder","create","setState","concat","detail","id","map","localIndex","remove","filter","data","index","toggle","Object","customElements","define","props","class","change","dispatch","click","submit","event","preventDefault","target","task","value","reset","name"],"mappings":"wCAAA,SAASA,EAAYC,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,0qECb/B,MAAMe,UAAgBC,UACjCC,cACIC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAC1BF,KAAKG,MAAMC,KAAO,CACd,CAAEC,KAAM,kBAAmBC,SAAS,GACpC,CAAED,KAAM,6BAA8BC,SAAS,IAGvDR,sBACwBE,KAAKG,WACzB,sBADa,IAETI,eACIA,cAAI,iBACJA,mBACIA,iBAAQpB,GACRoB,uBACIC,YAAY,yBACZC,gBAAS3B,kBACLkB,EAAKU,SAAS,CACVN,KAAMA,EAAKO,OAAO,CACdN,KAAMO,EAAOP,KACbC,SAAS,SAKzBC,WAAKM,GAAG,kBACJT,EAAMU,aAAKhC,EAAmBiC,mCAC1BR,sBACIF,KAAMA,EACNC,QAASA,EACTU,kBACIhB,EAAKU,SAAS,CACVN,KAAMA,EAAKa,gBACNC,EAAMC,UAAUA,IAAUJ,OAIvCK,kBACIpB,EAAKU,SAAS,CACVN,KAAMA,EAAKU,aACNI,EAAMC,UACHA,IAAUJ,EACJM,iBACKH,GACHZ,SAAUY,EAAKZ,UAEjBY,sBAatDI,eAAeC,OAhES,+BCLK1B,UACzBC,cACIC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAE9BsB,mBACI,MAAO,CAAC,OAAQ,WAEpB1B,oBACI,OACIS,UAAIkB,MAAOzB,KAAKwB,MAAMlB,QAAU,YAAc,IAC1CC,iBAAQpB,GACRoB,aACIlB,KAAK,WACLqC,kBACI1B,EAAK2B,SAAS,WAElBrB,QAASN,KAAKwB,MAAMlB,UAExBC,iBAAQP,KAAKwB,MAAMnB,MACnBE,cACIqB,iBACI5B,EAAK2B,SAAS,YAErB,SD8CjBL,eAAeC,OAhEU,gCELI1B,UACzBC,cACIC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAE9BsB,mBACI,MAAO,CAAC,eAEZ1B,oBACI,OACIS,YACIsB,gBAAQC,GACJA,EAAMC,iBACN/B,EAAK2B,SAAS,SAAU,CACpBtB,KAAMyB,EAAME,OAAOC,KAAKC,QAE5BJ,EAAME,OAAOG,UAGjB5B,iBAAQpB,GACRoB,aACI6B,KAAK,OACL/C,KAAK,OACLmB,YAAaR,KAAKwB,MAAMhB,kBF+C5Cc,eAAeC,OAnES,YAmEQ3B,cAnER,uBACA,6BACC"}